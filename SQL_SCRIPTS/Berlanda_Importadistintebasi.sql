--***************************************************
--* Script per la crezione delle tabelle  e della 
--* store procedure per la gestione dell'import
--* in Metodo delle Distinte Basi dal PDM
--*
--* BERLANDA 21/10/2013
--***************************************************

USE [DITTAPRO]
GO

IF NOT EXISTS(SELECT SYSCOLUMNS.NAME FROM SYSCOLUMNS WHERE SYSCOLUMNS.ID=(SELECT ID FROM SYSOBJECTS WHERE ID=object_id('extramag') AND SYSOBJECTS.XTYPE='U') AND SYSCOLUMNS.NAME='Revisione')
	ALTER TABLE EXTRAMAG ADD Revisione INT
GO

DROP TRIGGER [dbo].[TI_UTENTE_CREAZIONE_AA]
GO
CREATE TRIGGER [dbo].[TI_UTENTE_CREAZIONE_AA] ON [dbo].[EXTRAMAG] FOR INSERT AS
BEGIN
    DECLARE
       @NUMROWS  INT,
       @strData varchar(10),
       @ERRNO    INT,
       @ERRMSG   VARCHAR(255)

    SELECT  @NUMROWS = @@ROWCOUNT
    IF @NUMROWS = 0
       RETURN

	SET @strData=right('00' + cast(day(getdate()) as varchar(2)), 2) + '-' + right('00' + cast(month(getdate()) as varchar(2)), 2) + '-' + right('0000' + cast(year(getdate()) as varchar(4)), 4)

    /*  UPDATE EXTRAMAG UTENTE, DATA CREAZIONE */
    UPDATE EXTRAMAG
	SET UTENTECREAZIONE=(SELECT USERID FROM TABUTENTI WHERE USERDB = USER_NAME()),
		DATACREAZIONE=convert(datetime, @strData, 105)
    FROM   EXTRAMAG T2, INSERTED T1
    WHERE  T2.CODART = T1.CODART and T2.UTENTEMODIFICA <>'PDM'
    
    RETURN

/*  ERRORS HANDLING  */
ERROR:
    raiserror (@errmsg, 1, 1)
    ROLLBACK  TRANSACTION
END
GO

IF EXISTS(SELECT SYSCOLUMNS.NAME FROM SYSCOLUMNS WHERE SYSCOLUMNS.ID=(SELECT ID FROM SYSOBJECTS WHERE ID=object_id('ExtraDistinta') AND SYSOBJECTS.XTYPE='U') AND SYSCOLUMNS.NAME='CompetenzaPGM')
ALTER TABLE EXTRADISTINTA
	DROP COLUMN CompetenzaPGM
GO
IF NOT EXISTS(SELECT SYSCOLUMNS.NAME FROM SYSCOLUMNS WHERE SYSCOLUMNS.ID=(SELECT ID FROM SYSOBJECTS WHERE ID=object_id('ExtraDistinta') AND SYSOBJECTS.XTYPE='U') AND SYSCOLUMNS.NAME='PDMGenerated')
ALTER TABLE ExtraDistinta
	ADD PDMGenerated int DEFAULT 0
GO
INSERT INTO ExtraDistinta (Progressivo, UtenteModifica, DataModifica)
	SELECT DAC.Progressivo, DAC.UtenteModifica, DAC.DataModifica
		FROM DistintaArtComposti DAC
		WHERE DAC.Progressivo NOT IN (SELECT ED.Progressivo FROM ExtraDistinta ED)
GO
UPDATE EXTRADISTINTA SET PDMGenerated=0 WHERE PDMGenerated IS NULL
GO

IF OBJECT_ID('Deleted_DISTINTAARTCOMPOSTI', 'U') IS NULL
	CREATE TABLE [dbo].[Deleted_DISTINTAARTCOMPOSTI](
		[PROGRESSIVO] [decimal](10, 0) NULL,
		[IDENTIFICATIVODBA] [varchar](6) NULL,
		[ARTCOMPOSTO] [varchar](50) NULL,
		[VERSIONEDBA] [varchar](10) NULL,
		[DSCVERSIONE] [varchar](80) NULL,
		[STATOVERSIONE] [smallint] NULL,
		[VALIDITADBA] [datetime] NOT NULL,
		[DBASTANDARD] [smallint] NULL,
		[NOTEDBA] [varchar](255) NULL,
		[UM] [varchar](3) NOT NULL,
		[QUANTITARIF] [decimal](16, 6) NULL,
		[UTENTEMODIFICA] [varchar](25) NULL,
		[DATAMODIFICA] [datetime] NULL,
		[RIFARTICOLO] [varchar](50) NULL
	) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON Deleted_DISTINTAARTCOMPOSTI TO Metodo98
GO

IF OBJECT_ID('Deleted_DISTINTABASE', 'U') IS NULL
CREATE TABLE [dbo].[Deleted_DISTINTABASE](
	[RIFPROGRESSIVO] [decimal](10, 0) NULL,
	[NRRIGA] [decimal](10, 0) NULL,
	[POSIZIONE] [int] NULL,
	[CODARTCOMPONENTE] [varchar](100) NULL,
	[DESCRIZIONE] [varchar](80) NULL,
	[SOLOSE] [varchar](255) NULL,
	[UM] [varchar](3) NOT NULL,
	[QTA1] [varchar](255) NULL,
	[OPERATORE] [varchar](1) NULL,
	[QTA2] [varchar](255) NULL,
	[CALCOLO] [varchar](255) NULL,
	[QTACOSTO] [varchar](255) NULL,
	[VERSIONECOMPONENTE] [varchar](10) NULL,
	[SVILUPPACOMPONENTE] [varchar](255) NULL,
	[DISEGNOALLEGATO] [varchar](25) NULL,
	[NUMCOMPONENTE] [varchar](25) NULL,
	[SEQASSEMBLAGGIO] [varchar](25) NULL,
	[NOTECOMPONENTE] [varchar](255) NULL,
	[LEADTIMEADJ] [int] NULL,
	[PROGCICLO] [int] NULL,
	[NUMFASECICLO] [smallint] NULL,
	[UTENTEMODIFICA] [varchar](25) NULL,
	[DATAMODIFICA] [datetime] NULL,
	[UMCOSTO] [varchar](3) NULL,
	[FORMULAFRONTIERA] [varchar](255) NULL
) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [Deleted_DISTINTABASE] TO Metodo98
GO

IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaTabComponentiDBACicloRelDAC' AND SO.Type='V')
	DROP VIEW Met_VistaTabComponentiDBACicloRelDAC
GO
CREATE VIEW Met_VistaTabComponentiDBACicloRelDAC AS
SELECT
	T.PROGRESSIVO, T.NUMEROFASE, T.IDRIGADBA,
	D2.CODARTCOMPONENTE,
	D2.RIFPROGRESSIVO AS PROGRESSIVODBA,
	D.ARTCOMPOSTO
	
FROM
	TABCOMPONENTIDBACICLO T LEFT OUTER JOIN TESTACICLOPROD T2 ON T.PROGRESSIVO = T2.PROGRESSIVO AND T2.VERSIONEDBA='STD'
	LEFT OUTER JOIN DISTINTAARTCOMPOSTI D ON D.ARTCOMPOSTO=T2.CODCICLO AND D.VERSIONEDBA=T2.VERSIONEDBA
	LEFT OUTER JOIN DISTINTABASE D2 ON D2.RIFPROGRESSIVO=D.PROGRESSIVO AND D2.NRRIGA=T.IDRIGADBA
go
GRANT SELECT ON Met_VistaTabComponentiDBACicloRelDAC TO Metodo98
go


IF OBJECT_ID('TEMP_Met_TABCOMPONENTIDBACICLO', 'U') IS not NULL
drop table [dbo].[TEMP_Met_TABCOMPONENTIDBACICLO]
go
CREATE TABLE [dbo].[TEMP_Met_TABCOMPONENTIDBACICLO](
	[PROGRESSIVO] [int] NULL,
	[PROGRESSIVODBA] [decimal](10, 0) NULL,
	[CODARTCOMPOSTO] [varchar](100) NULL,
	[NRRIGA] [decimal](10, 0) NULL,
	[POSIZIONE] [int] NULL,
	[CODARTCOMPONENTE] [varchar](100) NULL,
	[DESCRIZIONE] [varchar](80) NULL,
	[NUMEROFASEBEFORE] [int] NULL,
	[NUMEROFASEAFTER] [int] NULL,
	[IDRIGADBABEFORE] [int] NULL,
	[IDRIGADBAAFTER] [int] NULL
) ON [PRIMARY]
go
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [TEMP_Met_TABCOMPONENTIDBACICLO] TO Metodo98
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'GetProgressivoArtComposto') AND xtype IN (N'FN', N'IF', N'TF'))
   DROP FUNCTION GetProgressivoArtComposto
GO
CREATE FUNCTION GetProgressivoArtComposto (@ARTCOMPOSTO VARCHAR(80))
RETURNS INT
AS
BEGIN
	DECLARE @PROGRESSIVO INT;
	SELECT @PROGRESSIVO=PROGRESSIVO FROM DISTINTAARTCOMPOSTI WHERE ARTCOMPOSTO=@ARTCOMPOSTO AND VERSIONEDBA='STD'
	RETURN @PROGRESSIVO
END
GO
GRANT EXECUTE ON GetProgressivoArtComposto TO Metodo98
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'GetProgressivoCiclo') AND xtype IN (N'FN', N'IF', N'TF'))
   DROP FUNCTION GetProgressivoCiclo
GO
CREATE FUNCTION GetProgressivoCiclo (@ARTCOMPOSTO VARCHAR(80))
RETURNS INT
AS
BEGIN
	DECLARE @PROGRESSIVO INT;
	SELECT @PROGRESSIVO=PROGRESSIVO FROM TESTACICLOPROD WHERE CODCICLO=@ARTCOMPOSTO AND VERSIONEDBA='STD'
	RETURN @PROGRESSIVO
END
GO
GRANT EXECUTE ON GetProgressivoCiclo TO METODO98
GO

IF EXISTS ( SELECT
                *
            FROM
                DBO.SYSOBJECTS
            WHERE
                ID = OBJECT_ID(N'[DBO].[BreCea_Lei_GeneraDBA]')
                AND OBJECTPROPERTY(ID, N'ISPROCEDURE') = 1 )
    DROP PROCEDURE [DBO].[BreCea_Lei_GeneraDBA]
GO


CREATE PROCEDURE [dbo].[BreCea_Lei_GeneraDBA]
AS 
delete from Db_Lei..TEMP_Met_VistaTesteDBA;

INSERT  INTO Db_Lei..TEMP_Met_VistaTesteDBA
        ( ProgrID, ID, PROGRESSIVO, CODICE, VERSIONE, DESCR, STATODISTINTA, DATAINIZIOVALIDITA, DISTINTASTANDARD, UM,
          QUANTITA, UTENTE, DATA, StatoMetodo )
        SELECT
            ProgrID, ID, PROGRESSIVO, CODICE, VERSIONE, DESCR, STATODISTINTA, DATAINIZIOVALIDITA, DISTINTASTANDARD, UM,
            QUANTITA, UTENTE, DATA, StatoMetodo
        FROM
            Db_Lei..Met_VistaTesteDBA;

-- ROUTINE PER INSERIMENTO PROGRESSIVO DISTINTAARTCOMPOSTI
DECLARE @NUOVOPROGRESSIVO INT;
SELECT
    @NUOVOPROGRESSIVO = PROGR
FROM
    TABPROGRESSIVI (UPDLOCK)
WHERE
    NOMETABELLA = 'DistintaArtComposti';
WITH    WRC
          AS ( SELECT
                ID, @NUOVOPROGRESSIVO + ROW_NUMBER() OVER ( ORDER BY ID ) AS NEWWRC, CODICE
               FROM
                Db_Lei..TEMP_Met_VistaTesteDBA)
    UPDATE
        Db_Lei..TEMP_Met_VistaTesteDBA
    SET PROGRESSIVO = NEWWRC
    FROM
        Db_Lei..TEMP_Met_VistaTesteDBA AS orca
    JOIN WRC
    ON  ORCA.ID = WRC.ID;
DECLARE @NEWPROGRESSIVO INT;
SELECT
    @NEWPROGRESSIVO = MAX(PROGRESSIVO)
FROM
    Db_Lei..TEMP_Met_VistaTesteDBA;
UPDATE
    TABPROGRESSIVI
SET PROGR = @NEWPROGRESSIVO
WHERE
    NOMETABELLA = 'DistintaArtComposti';

--cancellazione righe
INSERT  INTO Deleted_DISTINTAARTCOMPOSTI
        SELECT
            PROGRESSIVO, IDENTIFICATIVODBA, ARTCOMPOSTO, VERSIONEDBA, DSCVERSIONE, STATOVERSIONE, VALIDITADBA,
            DBASTANDARD, NOTEDBA, UM, QUANTITARIF, 'bizlogic_deleted', GETDATE(), RIFARTICOLO
        FROM
            DISTINTAARTCOMPOSTI
        WHERE
            VERSIONEDBA = 'STD'
            AND ARTCOMPOSTO IN ( SELECT
                                    CODICE
                                 FROM
                                    Db_Lei..TEMP_Met_VistaTesteDBA );

DELETE FROM
    DISTINTAARTCOMPOSTI
WHERE
    VERSIONEDBA = 'STD'
    AND ARTCOMPOSTO IN ( SELECT
                            CODICE
                         FROM
                            Db_Lei..TEMP_Met_VistaTesteDBA );

-- inserimento testa distinta
MERGE INTO DISTINTAARTCOMPOSTI AS TGT
    USING Db_Lei..TEMP_Met_VistaTesteDBA AS SRC
    ON TGT.ARTCOMPOSTO = SRC.CODICE
        AND TGT.VERSIONEDBA = 'STD'
    WHEN MATCHED
        THEN
  UPDATE  SET
            TGT.VERSIONEDBA = SRC.VERSIONE, TGT.DSCVERSIONE = SRC.DESCR, TGT.VALIDITADBA = SRC.DATAINIZIOVALIDITA,
            TGT.UM = SRC.UM, TGT.QUANTITARIF = SRC.QUANTITA, TGT.UTENTEMODIFICA = 'bizlogic_update',
            TGT.DATAMODIFICA = GETDATE()
    WHEN NOT MATCHED
        THEN 
INSERT
            ( PROGRESSIVO, IDENTIFICATIVODBA, ARTCOMPOSTO, VERSIONEDBA, DSCVERSIONE, STATOVERSIONE, VALIDITADBA,
              DBASTANDARD, NOTEDBA, UM, QUANTITARIF, UTENTEMODIFICA, DATAMODIFICA, RIFARTICOLO )
          VALUES
            ( PROGRESSIVO, '', SRC.CODICE, SRC.VERSIONE, '', 1, SRC.DATAINIZIOVALIDITA, 1, '', SRC.UM, SRC.QUANTITA,
              'bizlogic_insert', GETDATE(), SRC.CODICE );

-- aggiorno il flag a importato
-- imposto lo statometodo a 2 --> importato
UPDATE
    Db_Lei..MET_DISTINTAARTCOMPOSTI
SET StatoMetodo = 2
WHERE
    CODICE IN ( SELECT
                    CODICE
                FROM
                    Db_Lei..TEMP_Met_VistaTesteDBA );


MERGE INTO EXTRADISTINTA AS TGT
    USING Db_Lei..TEMP_Met_VistaTesteDBA AS SRC
    ON TGT.PROGRESSIVO = SRC.PROGRESSIVO
    WHEN MATCHED
        THEN
  UPDATE  SET
            TGT.PDMGenerated = 1, TGT.UTENTEMODIFICA = 'bizlogic_update', TGT.DATAMODIFICA = GETDATE()
    WHEN NOT MATCHED
        THEN 
INSERT
            ( PROGRESSIVO, UTENTEMODIFICA, DATAMODIFICA, PDMGenerated )
          VALUES
            ( SRC.PROGRESSIVO, 'BIZLOGIC_INSERT', GETDATE(), 1 );

-- inserimento righe in tabella temporanea pre-inserimento in metodo
DELETE FROM Db_Lei..TEMP_Met_VistaRigheDBA;

INSERT  INTO Db_Lei..TEMP_Met_VistaRigheDBA
        ( RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE, SOLOSE, UM, QTA1, OPERATORE, QTA2, CALCOLO,
          QTACOSTO, VERSIONECOMPONENTE, SVILUPPACOMPONENTE, DISEGNOALLEGATO, NUMCOMPONENTE, SEQASSEMBLAGGIO,
          NOTECOMPONENTE, LEADTIMEADJ, PROGCICLO, NUMFASECICLO, UTENTEMODIFICA, DATAMODIFICA, UMCOSTO, FORMULAFRONTIERA )
        SELECT
            T.PROGRESSIVO, R.IDRIGA, R.IDRIGA, R.CODICE, '', '', R.UM, R.QUANTITA, '', '', '', '', '', '', '', '',
            R.SEQUENZAASSEMBLAGGIO, '', 0, 0, 0, 'bizlogic_insert', GETDATE(), R.UM, ''
        FROM
            Db_Lei..TEMP_Met_VistaTesteDBA T
        JOIN Db_Lei..MET_DISTINTABASE R
        ON  T.ID = R.ID;

-- aggiornamento descrizione 
UPDATE
    Db_Lei..TEMP_Met_VistaRigheDBA
SET DESCRIZIONE = A.DESCRIZIONE
FROM
    Db_Lei..TEMP_Met_VistaRigheDBA T
JOIN ANAGRAFICAARTICOLI A
ON  T.CODARTCOMPONENTE = A.CODICE;

INSERT  INTO DISTINTABASE
        ( RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE, SOLOSE, UM, QTA1, OPERATORE, QTA2, CALCOLO,
          QTACOSTO, VERSIONECOMPONENTE, SVILUPPACOMPONENTE, DISEGNOALLEGATO, NUMCOMPONENTE, SEQASSEMBLAGGIO,
          NOTECOMPONENTE, LEADTIMEADJ, PROGCICLO, NUMFASECICLO, UTENTEMODIFICA, DATAMODIFICA, UMCOSTO, FORMULAFRONTIERA )
        SELECT
            RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE, SOLOSE, UM, QTA1, OPERATORE, QTA2, CALCOLO,
            QTACOSTO, VERSIONECOMPONENTE, SVILUPPACOMPONENTE, DISEGNOALLEGATO, NUMCOMPONENTE, SEQASSEMBLAGGIO,
            NOTECOMPONENTE, LEADTIMEADJ, PROGCICLO, NUMFASECICLO, UTENTEMODIFICA, DATAMODIFICA, UMCOSTO,
            FORMULAFRONTIERA
        FROM
            Db_Lei..TEMP_Met_VistaRigheDBA;

-- imposto il flagf ad importato
UPDATE
    Db_Lei..MET_DISTINTABASE
SET StatoMetodo = 2
WHERE
    ID IN ( SELECT
                ID
            FROM
                Db_Lei..MET_DISTINTAARTCOMPOSTI AS MD
            WHERE
                StatoMetodo = 2 );

DELETE FROM TEMP_Met_TABCOMPONENTIDBACICLO;

-- inserisco i dati provenienti dal database di frontiera LEI
INSERT  INTO TEMP_Met_TABCOMPONENTIDBACICLO
        ( PROGRESSIVODBA, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE )
        SELECT
            RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE
        FROM
            Db_Lei..TEMP_Met_VistaRigheDBA;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET codartcomposto = d.ARTCOMPOSTO
FROM
    TEMP_Met_TABCOMPONENTIDBACICLO
JOIN DISTINTAARTCOMPOSTI D
ON  TEMP_Met_TABCOMPONENTIDBACICLO.PROGRESSIVODBA = D.PROGRESSIVO;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET IDRIGADBABEFORE = MVTC.IDRIGADBA, NUMEROFASEBEFORE = MVTC.NUMEROFASE
FROM
    TEMP_Met_TABCOMPONENTIDBACICLO TMP
JOIN Met_VistaTabComponentiDBACicloRelDAC MVTC
ON  TMP.CODARTCOMPONENTE = MVTC.CODARTCOMPONENTE
WHERE
    MVTC.ARTCOMPOSTO = tmp.CODARTCOMPOSTO;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET PROGRESSIVO = dbo.GetProgressivoCiclo(codartcomposto)
GO

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET NUMEROFASEAFTER = NUMEROFASEBEFORE;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET NUMEROFASEAFTER = ( SELECT
                            NUMEROFASE
                        FROM
                            RIGHECICLOPROD
                        WHERE
                            RIGHECICLOPROD.PROGRESSIVO = TEMP_Met_TABCOMPONENTIDBACICLO.PROGRESSIVO
                            AND POSIZIONE = 1 )
WHERE
    NUMEROFASEBEFORE IS NULL;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET IDRIGADBAAFTER = NRRIGA;

DELETE FROM
    TEMP_Met_TABCOMPONENTIDBACICLO
WHERE
    PROGRESSIVO IS NULL;

DELETE FROM
    TABCOMPONENTIDBACICLO
WHERE
    PROGRESSIVO = ( SELECT DISTINCT
                        progressivo
                    FROM
                        TEMP_Met_TABCOMPONENTIDBACICLO );

INSERT  INTO TABCOMPONENTIDBACICLO
        ( PROGRESSIVO, NUMEROFASE, IDRIGADBA, UTENTEMODIFICA, DATAMODIFICA )
        SELECT
            PROGRESSIVO, NUMEROFASEAFTER, IDRIGADBAAFTER, 'bizlogic_insert', GETDATE()
        FROM
            TEMP_Met_TABCOMPONENTIDBACICLO;
GO







GRANT EXECUTE ON [BreCea_Lei_GeneraDBA] TO METODO98
GO
