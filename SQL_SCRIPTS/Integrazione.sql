/*
ATTENZIONE!!!
prima applicare script utenti Metodo standard e script utenti BreCea al db DbLei
*/

USE [BRECEA]
GO
IF NOT EXISTS(SELECT SYSCOLUMNS.NAME FROM SYSCOLUMNS WHERE SYSCOLUMNS.ID=(SELECT ID FROM SYSOBJECTS WHERE ID=object_id('extramag') AND SYSOBJECTS.XTYPE='U') AND SYSCOLUMNS.NAME='Revisione')
	ALTER TABLE EXTRAMAG ADD Revisione INT
GO

/*
modifica trigger esistente per conflitti record generati da PDM
*/
USE [BRECEA]
GO
DROP TRIGGER [dbo].[TI_UTENTE_CREAZIONE_AA]
GO
CREATE TRIGGER [dbo].[TI_UTENTE_CREAZIONE_AA] ON [dbo].[EXTRAMAG] FOR INSERT AS
BEGIN
    DECLARE
       @NUMROWS  INT,
       @strData varchar(10),
       @ERRNO    INT,
       @ERRMSG   VARCHAR(255)

    SELECT  @NUMROWS = @@ROWCOUNT
    IF @NUMROWS = 0
       RETURN

	SET @strData=right('00' + cast(day(getdate()) as varchar(2)), 2) + '-' + right('00' + cast(month(getdate()) as varchar(2)), 2) + '-' + right('0000' + cast(year(getdate()) as varchar(4)), 4)

    /*  UPDATE EXTRAMAG UTENTE, DATA CREAZIONE */
    UPDATE EXTRAMAG
	SET UTENTECREAZIONE=(SELECT USERID FROM TABUTENTI WHERE USERDB = USER_NAME()),
		DATACREAZIONE=convert(datetime, @strData, 105)
    FROM   EXTRAMAG T2, INSERTED T1
    WHERE  T2.CODART = T1.CODART and T2.UTENTEMODIFICA <>'PDM'
    
    RETURN

/*  ERRORS HANDLING  */
ERROR:
    raiserror (@errmsg, 1, 1)
    ROLLBACK  TRANSACTION
END
GO

/*
Cancellazione extra non più necessario
CAMPO EXTRA DISTINTA PER BLOCCO distinte generate da pdm
*/

USE [BRECEA]
GO
IF EXISTS(SELECT SYSCOLUMNS.NAME FROM SYSCOLUMNS WHERE SYSCOLUMNS.ID=(SELECT ID FROM SYSOBJECTS WHERE ID=object_id('ExtraDistinta') AND SYSOBJECTS.XTYPE='U') AND SYSCOLUMNS.NAME='CompetenzaPGM')
ALTER TABLE EXTRADISTINTA
	DROP COLUMN CompetenzaPGM
GO
IF NOT EXISTS(SELECT SYSCOLUMNS.NAME FROM SYSCOLUMNS WHERE SYSCOLUMNS.ID=(SELECT ID FROM SYSOBJECTS WHERE ID=object_id('ExtraDistinta') AND SYSOBJECTS.XTYPE='U') AND SYSCOLUMNS.NAME='PDMGenerated')
ALTER TABLE ExtraDistinta
	ADD PDMGenerated int DEFAULT 0
GO
INSERT INTO ExtraDistinta (Progressivo, UtenteModifica, DataModifica)
	SELECT DAC.Progressivo, DAC.UtenteModifica, DAC.DataModifica
		FROM DistintaArtComposti DAC
		WHERE DAC.Progressivo NOT IN (SELECT ED.Progressivo FROM ExtraDistinta ED)
GO
UPDATE EXTRADISTINTA SET PDMGenerated=0 WHERE PDMGenerated IS NULL
GO

/*
tabelle per log record distinte cancellate
*/
USE [BRECEA]
GO
IF OBJECT_ID('Deleted_DISTINTAARTCOMPOSTI', 'U') IS NULL
	CREATE TABLE [dbo].[Deleted_DISTINTAARTCOMPOSTI](
		[PROGRESSIVO] [decimal](10, 0) NULL,
		[IDENTIFICATIVODBA] [varchar](6) NULL,
		[ARTCOMPOSTO] [varchar](50) NULL,
		[VERSIONEDBA] [varchar](10) NULL,
		[DSCVERSIONE] [varchar](80) NULL,
		[STATOVERSIONE] [smallint] NULL,
		[VALIDITADBA] [datetime] NOT NULL,
		[DBASTANDARD] [smallint] NULL,
		[NOTEDBA] [varchar](255) NULL,
		[UM] [varchar](3) NOT NULL,
		[QUANTITARIF] [decimal](16, 6) NULL,
		[UTENTEMODIFICA] [varchar](25) NULL,
		[DATAMODIFICA] [datetime] NULL,
		[RIFARTICOLO] [varchar](50) NULL
	) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON Deleted_DISTINTAARTCOMPOSTI TO Metodo98
GO
IF OBJECT_ID('Deleted_DISTINTABASE', 'U') IS NULL
CREATE TABLE [dbo].[Deleted_DISTINTABASE](
	[RIFPROGRESSIVO] [decimal](10, 0) NULL,
	[NRRIGA] [decimal](10, 0) NULL,
	[POSIZIONE] [int] NULL,
	[CODARTCOMPONENTE] [varchar](100) NULL,
	[DESCRIZIONE] [varchar](80) NULL,
	[SOLOSE] [varchar](255) NULL,
	[UM] [varchar](3) NOT NULL,
	[QTA1] [varchar](255) NULL,
	[OPERATORE] [varchar](1) NULL,
	[QTA2] [varchar](255) NULL,
	[CALCOLO] [varchar](255) NULL,
	[QTACOSTO] [varchar](255) NULL,
	[VERSIONECOMPONENTE] [varchar](10) NULL,
	[SVILUPPACOMPONENTE] [varchar](255) NULL,
	[DISEGNOALLEGATO] [varchar](25) NULL,
	[NUMCOMPONENTE] [varchar](25) NULL,
	[SEQASSEMBLAGGIO] [varchar](25) NULL,
	[NOTECOMPONENTE] [varchar](255) NULL,
	[LEADTIMEADJ] [int] NULL,
	[PROGCICLO] [int] NULL,
	[NUMFASECICLO] [smallint] NULL,
	[UTENTEMODIFICA] [varchar](25) NULL,
	[DATAMODIFICA] [datetime] NULL,
	[UMCOSTO] [varchar](3) NULL,
	[FORMULAFRONTIERA] [varchar](255) NULL
) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [Deleted_DISTINTABASE] TO Metodo98
GO

IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaTabComponentiDBACicloRelDAC' AND SO.Type='V')
	DROP VIEW Met_VistaTabComponentiDBACicloRelDAC
GO
CREATE VIEW Met_VistaTabComponentiDBACicloRelDAC AS
SELECT
	T.PROGRESSIVO, T.NUMEROFASE, T.IDRIGADBA,
	D2.CODARTCOMPONENTE,
	D2.RIFPROGRESSIVO AS PROGRESSIVODBA,
	D.ARTCOMPOSTO
	
FROM
	TABCOMPONENTIDBACICLO T LEFT OUTER JOIN TESTACICLOPROD T2 ON T.PROGRESSIVO = T2.PROGRESSIVO AND T2.VERSIONEDBA='STD'
	LEFT OUTER JOIN DISTINTAARTCOMPOSTI D ON D.ARTCOMPOSTO=T2.CODCICLO AND D.VERSIONEDBA=T2.VERSIONEDBA
	LEFT OUTER JOIN DISTINTABASE D2 ON D2.RIFPROGRESSIVO=D.PROGRESSIVO AND D2.NRRIGA=T.IDRIGADBA
go
GRANT SELECT ON Met_VistaTabComponentiDBACicloRelDAC TO Metodo98
go


IF OBJECT_ID('TEMP_Met_TABCOMPONENTIDBACICLO', 'U') IS not NULL
drop table [dbo].[TEMP_Met_TABCOMPONENTIDBACICLO]
go
CREATE TABLE [dbo].[TEMP_Met_TABCOMPONENTIDBACICLO](
	[PROGRESSIVO] [int] NULL,
	[PROGRESSIVODBA] [decimal](10, 0) NULL,
	[CODARTCOMPOSTO] [varchar](100) NULL,
	[NRRIGA] [decimal](10, 0) NULL,
	[POSIZIONE] [int] NULL,
	[CODARTCOMPONENTE] [varchar](100) NULL,
	[DESCRIZIONE] [varchar](80) NULL,
	[NUMEROFASEBEFORE] [int] NULL,
	[NUMEROFASEAFTER] [int] NULL,
	[IDRIGADBABEFORE] [int] NULL,
	[IDRIGADBAAFTER] [int] NULL
) ON [PRIMARY]
go
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [TEMP_Met_TABCOMPONENTIDBACICLO] TO Metodo98
GO

/*
FUNZIONI
*/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'GetProgressivoArtComposto') AND xtype IN (N'FN', N'IF', N'TF'))
   DROP FUNCTION GetProgressivoArtComposto
GO
CREATE FUNCTION GetProgressivoArtComposto (@ARTCOMPOSTO VARCHAR(80))
RETURNS INT
AS
BEGIN
	DECLARE @PROGRESSIVO INT;
	SELECT @PROGRESSIVO=PROGRESSIVO FROM DISTINTAARTCOMPOSTI WHERE ARTCOMPOSTO=@ARTCOMPOSTO AND VERSIONEDBA='STD'
	RETURN @PROGRESSIVO
END
GO
GRANT EXECUTE ON GetProgressivoArtComposto TO Metodo98
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'GetProgressivoCiclo') AND xtype IN (N'FN', N'IF', N'TF'))
   DROP FUNCTION GetProgressivoCiclo
GO
CREATE FUNCTION GetProgressivoCiclo (@ARTCOMPOSTO VARCHAR(80))
RETURNS INT
AS
BEGIN
	DECLARE @PROGRESSIVO INT;
	SELECT @PROGRESSIVO=PROGRESSIVO FROM TESTACICLOPROD WHERE CODCICLO=@ARTCOMPOSTO AND VERSIONEDBA='STD'
	RETURN @PROGRESSIVO
END
GO
GRANT EXECUTE ON GetProgressivoCiclo TO METODO98
GO



/*
******************************************************************************************************************************************************
#################################                    SCRIPT SU DATABASE DI FRONTIERA DB_LEI                      #####################################
******************************************************************************************************************************************************
*/

USE [Db_Lei]
GO
-- tabella articoli creati da PDM
IF OBJECT_ID('PDM_ANAG_SMALL', 'U') IS NULL
	CREATE TABLE [dbo].[PDM_ANAG_SMALL](
		[CODICE] [nvarchar](11) NOT NULL,
		[REV] [int] NOT NULL,
		[DESCR] [nvarchar](50) NULL,
		[UM] [nvarchar](2) NULL,
		[UTENTE] [nvarchar](10) NULL,
		[DATA] [date] NULL,
		[TP] [nvarchar](8) NULL,
		[LINKFILE] [nvarchar](max) NULL,
		[STATORECORD] [nvarchar](1) NULL,
		[StatoLEI] [smallint] NULL,
	 CONSTRAINT [PK_PDM_ANAG_SMALL] PRIMARY KEY CLUSTERED 
	(
		[CODICE] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [dbo].[PDM_ANAG_SMALL] TO [Metodo98]
GO
-- tabella articoli creati da PDM
IF OBJECT_ID('PDM_ANAG', 'U') IS NULL
	CREATE TABLE [dbo].[PDM_ANAG](
		[CODICE] [nvarchar](11) NOT NULL,
		[REV] [int] NOT NULL,
		[DESCR] [nvarchar](50) NULL,
		[UM] [nvarchar](2) NULL,
		[UTENTE] [nvarchar](10) NULL,
		[DATA] [date] NULL,
		[TP] [nvarchar](8) NULL,
		[LINKFILE] [nvarchar](max) NULL,
		[STATORECORD] [nvarchar](1) NULL,
		-- campi gestiti da LEI-Metodo
		[NOMENCLCOMBINATA1] [varchar](8) NULL,
		[NOMENCLCOMBINATA2] [varchar](8) NULL,
		[TIPOINTRA] [smallint] NULL,
		[AGGIORNAMAG] [smallint] NULL,
		[CODIVA] [decimal](5, 0) NULL,
		[BARCODETYPE] [smallint] NULL,
		[SCGENACQUISTIITA] [varchar](7) NULL,
		[SCGENACQUISTIEST] [varchar](7) NULL,
		[CODDEPOSITO] [varchar](10) NULL,
		[TIPOPRODOTTO] [smallint] NULL,
		[RAGGRPRODUZIONE] [varchar](1) NULL,
		[LIVPRODUZIONE] [varchar](1) NULL,
		[GESTIONEMATERIALI] [smallint] NULL,
		[TIPOGESTIONE] [smallint] NULL,
		[PROVENIENZA] [smallint] NULL,
		[CODPIANIFICATORE] [decimal](5, 0) NULL,
		[CodArtProd] [varchar](25) NULL,
		[NomeProd] [varchar](80) NULL,
		[LottoSTD] [decimal](16, 6) NOT NULL,
		[DURATAPREVISTAORE] [decimal](5, 0) NULL,
		[VERRICAMBIO] [varchar](15) NULL,
		[LTCUMULATO] [smallint] NOT NULL,
		[StatoMetodo] [smallint] NULL,			
		[DataModificaMetodo] [datetime] NULL,
	 CONSTRAINT [PK_PDM_ANAG] PRIMARY KEY CLUSTERED 
	(
		[CODICE] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [dbo].[PDM_ANAG] TO [Metodo98]
GO



-- TABELLA TESTATA DISTINTE METODO
IF OBJECT_ID('MET_DISTINTAARTCOMPOSTI', 'U') IS NOT NULL 
	DROP TABLE MET_DISTINTAARTCOMPOSTI
GO
CREATE TABLE [dbo].[MET_DISTINTAARTCOMPOSTI](
	[ID] [nvarchar](10) NOT NULL,	-- sessione lavoro PDM
	[PROGRESSIVO] INT,
	[CODICE] [nvarchar](11) NOT NULL,
	[VERSIONE] [nvarchar](3) NOT NULL DEFAULT 'STD',	-- valore fisso "STD"
	[DESCR] [nvarchar](1) NULL DEFAULT '',
	[STATODISTINTA] [nvarchar](1) NULL,	-- stato distinta da tabella PDM
	[DATAINIZIOVALIDITA] [datetime] NOT NULL DEFAULT '20080101',	-- valore fisso "01/01/2008"
	[DISTINTASTANDARD] [INT] NOT NULL DEFAULT 1,
	[UM] [nvarchar](2) NULL,
	[QUANTITA] [int] NOT NULL DEFAULT 1,	-- valore fisso = 1
	[UTENTE] [nvarchar](10) NULL,
	[DATA] [date] NULL,
	[StatoMetodo] [smallint] NULL,
	[StatoControlli] [smallint] NULL,
	CONSTRAINT [PK_MET_DISTINTAARTCOMPOSTI] PRIMARY KEY CLUSTERED ( [ID], [CODICE] ASC )
	WITH ( PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON ) ON [PRIMARY]
) ON [PRIMARY] 
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [dbo].[MET_DISTINTAARTCOMPOSTI] TO [Metodo98]
GO

-- TABELLA LEGAMI DISTINTE METODO MET_DISTINTABASE
IF OBJECT_ID('MET_DISTINTABASE', 'U') IS NOT NULL
	DROP TABLE MET_DISTINTABASE
GO
CREATE TABLE [dbo].[MET_DISTINTABASE](
	[ID] [nvarchar](10) NOT NULL,	
	[IDRIGA] [INT] NOT NULL,
	[POSIZIONE] [INT] NOT NULL,	-- posizione PDM
	[CODICE] [nvarchar](11) NOT NULL,
	[UM] [nvarchar](2) NULL,
	[QUANTITA] [nvarchar](20) NULL,	-- fromato alfanumerico con separatore decimale ","
	[SEQUENZAASSEMBLAGGIO] [INT] NULL, -- posizione PDM
	[UTENTE] [nvarchar](10) NULL,
	[DATA] [date] NULL,
	[StatoMetodo] [smallint] NULL,
	[StatoControlli] [smallint] NULL,
	CONSTRAINT [PK_MET_DISTINTABASE] PRIMARY KEY CLUSTERED 
(
	[ID],[IDRIGA],[POSIZIONE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] 

GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [dbo].[MET_DISTINTABASE] TO [Metodo98]
GO


/*
tabella PDM_DISTINTAARTCOMPOSTI
*/
IF OBJECT_ID('PDM_DISTINTAARTCOMPOSTI', 'U') IS NULL 
CREATE TABLE [dbo].[PDM_DISTINTAARTCOMPOSTI](
	[ID] [nvarchar](10) NOT NULL,
	[ARTICOLOPADRE] [nvarchar](11) NOT NULL,
	[STATOBOM] [smallint] NULL,
	[UTENTEMODIFICA] [nvarchar](15) NULL,
	[DATAMODIFICA] [date] NULL,
 CONSTRAINT [PK_PDM_DISTINTAARTCOMPOSTI] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [dbo].[PDM_DISTINTAARTCOMPOSTI] TO [Metodo98]
GO

IF OBJECT_ID('PDM_DISTINTABASE', 'U') IS NULL 
CREATE TABLE [dbo].[PDM_DISTINTABASE](
	[ID] [nvarchar](10) NOT NULL,
	[ARTCOMPONENTE] [nvarchar](11) NOT NULL,
	[UM] [nvarchar](2) NOT NULL,
	[QTA] [decimal](16, 6) NOT NULL,
	[POSIZIONE] [varchar](25) NULL,
 CONSTRAINT [PK_PDM_DISTINTABASE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[ARTCOMPONENTE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON [dbo].[PDM_DISTINTABASE] TO [Metodo98]
GO

-- tabelle di appoggio generazione distinte
IF OBJECT_ID('TEMP_Met_VistaRigheDBA', 'U') IS NOT NULL
	DROP TABLE TEMP_Met_VistaRigheDBA
GO
CREATE TABLE [dbo].[TEMP_Met_VistaRigheDBA](
	[RIFPROGRESSIVO] [decimal](10, 0) NOT NULL,
	[NRRIGA] [decimal](10, 0) NOT NULL,
	[POSIZIONE] [int] NULL,
	[CODARTCOMPONENTE] [varchar](100) NULL,
	[DESCRIZIONE] [varchar](80) NULL,
	[SOLOSE] [varchar](255) NULL,
	[UM] [varchar](3) NOT NULL,
	[QTA1] [varchar](255) NULL,
	[OPERATORE] [varchar](1) NULL,
	[QTA2] [varchar](255) NULL,
	[CALCOLO] [varchar](255) NULL,
	[QTACOSTO] [varchar](255) NULL,
	[VERSIONECOMPONENTE] [varchar](10) NULL,
	[SVILUPPACOMPONENTE] [varchar](255) NULL,
	[DISEGNOALLEGATO] [varchar](25) NULL,
	[NUMCOMPONENTE] [varchar](25) NULL,
	[SEQASSEMBLAGGIO] [varchar](25) NULL,
	[NOTECOMPONENTE] [varchar](255) NULL,
	[LEADTIMEADJ] [int] NULL,
	[PROGCICLO] [int] NULL,
	[NUMFASECICLO] [smallint] NULL,
	[UTENTEMODIFICA] [varchar](25) NOT NULL,
	[DATAMODIFICA] [datetime] NOT NULL,
	[UMCOSTO] [varchar](3) NULL,
	[FORMULAFRONTIERA] [varchar](255) NULL
) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON DBO.[TEMP_Met_VistaRigheDBA] TO Metodo98
GO

IF OBJECT_ID('TEMP_Met_VistaTesteDBA', 'U') IS NOT NULL
	DROP TABLE TEMP_Met_VistaTesteDBA
GO
CREATE TABLE [dbo].[TEMP_Met_VistaTesteDBA](
	[ProgrID] [bigint] NULL,
	[ID] [nvarchar](10) NOT NULL,
	[PROGRESSIVO] [int] NULL,
	[CODICE] [nvarchar](11) NOT NULL,
	[VERSIONE] [nvarchar](3) NOT NULL,
	[DESCR] [nvarchar](1) NULL,
	[STATODISTINTA] [nvarchar](1) NULL,
	[DATAINIZIOVALIDITA] [datetime] NOT NULL,
	[DISTINTASTANDARD] [int] NOT NULL,
	[UM] [nvarchar](2) NULL,
	[QUANTITA] [int] NOT NULL,
	[UTENTE] [nvarchar](10) NULL,
	[DATA] [date] NULL,
	[StatoMetodo] [smallint] NULL
) ON [PRIMARY]
GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON DBO.[TEMP_Met_VistaTesteDBA] TO Metodo98
GO

IF OBJECT_ID('TEMP_Met_TABCOMPONENTIDBACICLO', 'U') IS NOT NULL
	DROP TABLE TEMP_Met_TABCOMPONENTIDBACICLO
GO

CREATE TABLE [dbo].[TEMP_Met_TABCOMPONENTIDBACICLO](
	[PROGRESSIVO] INT NULL,
	[PROGRESSIVODBA] DECIMAL(10, 0) NULL,
	[CODARTCOMPOSTO] VARCHAR(100) NULL,
	[NRRIGA] DECIMAL(10, 0) NULL,
	[POSIZIONE] INT NULL,
	[CODARTCOMPONENTE] VARCHAR(100) NULL,
	[DESCRIZIONE] VARCHAR(80) NULL,
	[NUMEROFASEBEFORE] INT NULL,
	[NUMEROFASEAFTER] INT NULL,
	[IDRIGADBABEFORE]  INT NULL,
	[IDRIGADBAAFTER]  INT NULL
) ON [PRIMARY]

GO
GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON DBO.[TEMP_Met_TABCOMPONENTIDBACICLO] TO Metodo98
GO



/*
### VISTE ###
*/

/*
IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaAnagraficaCliFor' AND SO.Type='V')
	DROP VIEW Met_VistaAnagraficaCliFor
GO
CREATE VIEW [dbo].[Met_VistaAnagraficaCliFor] AS
SELECT
	A.CODCONTO,
	A.DSCCONTO1,
	A.INDIRIZZO,
	A.CAP,
	A.LOCALITA,
	A.PROVINCIA,
	A.TELEFONO,
	A.FAX,
	A.PARTITAIVA,
	A.CODNAZIONE,
	A.TELEX,
	A.INDIRIZZOINTERNET,
	T.DESCRIZIONE AS CODPAG,
	AA1.DSCAGENTE AS CODAGENTE1,
	AA2.DSCAGENTE AS CODAGENTE2,
	AA3.DSCAGENTE AS CODAGENTE3,
	A2.STATOALTRO,
	A2.STATOBOLLE,
	A2.STATOCONTABILITA,
	A2.STATOFATTURE,
	A2.STATOMAGAZZINO,
	A2.STATONOTEACCREDITO,
	A2.STATOORDINI,
	A2.NOTE1
FROM 
	BreCea.dbo.ANAGRAFICACF AS A LEFT OUTER JOIN BreCEA.dbo.ANAGRAFICARISERVATICF AS A2 ON A.CODCONTO = A2.CODCONTO AND A2.ESERCIZIO=YEAR(GETDATE())
	LEFT OUTER JOIN BreCEA.dbo.ANAGRAFICAAGENTI AS AA1 ON A2.CODAGENTE1=AA1.CODAGENTE
	LEFT OUTER JOIN BreCEA.dbo.ANAGRAFICAAGENTI AS AA2 ON A2.CODAGENTE2=AA2.CODAGENTE
	LEFT OUTER JOIN BreCEA.dbo.ANAGRAFICAAGENTI AS AA3 ON A2.CODAGENTE3=AA3.CODAGENTE
	LEFT OUTER JOIN BreCEA.dbo.TABPAGAMENTI AS T ON A2.CODPAG=T.CODICE

GO
GRANT SELECT ON Met_VistaAnagraficaCliFor TO Metodo98
GO


-- vista esposizione articoli verso PDM filtrata
IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaAnagraficaArticoli' AND SO.Type='V')
	DROP VIEW Met_VistaAnagraficaArticoli
GO
CREATE VIEW [dbo].[Met_VistaAnagraficaArticoli] AS
SELECT
	right(codice, len(codice)-2) as codcomm,
	CODICE, 
	descrizione 
FROM 
	BreCea.dbo.ANAGRAFICAARTICOLI
WHERE 
	codice LIKE '00Y%' 

GO
GRANT SELECT ON Met_VistaAnagraficaArticoli TO Metodo98
GO

-- vista esposizione articoli verso PDM COMPLETA
-- eventualmente da inserire filtro
IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaAnagraficaArticoliCompleta' AND SO.Type='V')
	DROP VIEW Met_VistaAnagraficaArticoliCompleta
GO
CREATE VIEW [dbo].[Met_VistaAnagraficaArticoliCompleta] AS
SELECT
	CODICE,
	DESCRIZIONE,
	GRUPPO,
	CATEGORIA,
	CODCATEGORIASTAT
FROM 
	BreCea.dbo.ANAGRAFICAARTICOLI

GO
GRANT SELECT ON Met_VistaAnagraficaArticoliCompleta TO Metodo98
GO


IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaUM' AND SO.Type='V')
	DROP VIEW Met_VistaUM
GO
CREATE VIEW [dbo].[Met_VistaUM] AS
SELECT
	CODICE ,
	DESCRIZIONE
FROM 
	BreCea.dbo.TABUNITAMISURA
GO
GRANT SELECT ON Met_VistaUM TO Metodo98
GO


IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaTipiParte' AND SO.Type='V')
	DROP VIEW Met_VistaTipiParte
GO
CREATE VIEW [dbo].[Met_VistaTipiParte] AS
SELECT
	a.CODICE,
	RIGHT(A.CODICE,1) AS TP,
	a.DESCRIZIONE,
	a.NOMENCLCOMBINATA1,
	a.NOMENCLCOMBINATA2,
	a.TIPOINTRA,
	a.AGGIORNAMAG,
	A3.UM,
	a2.CODIVA,
	a2.BARCODETYPE,
	a2.SCGENACQUISTIITA,
	a2.SCGENACQUISTIEST,
		'G   264' AS SCGENVENDITEITA,
	'G   264' AS SCGENVENDITEEST,
	a2.USAPREZZIPART,
	A.CODDEPOSITO,
	A4.TIPOPRODOTTO,
	A4.RAGGRPRODUZIONE,
	A4.LIVPRODUZIONE,
	A4.GESTIONEMATERIALI,
	A4.TIPOGESTIONE,
	A4.PROVENIENZA,
	E.CODPIANIFICATORE ,
	E.DISEGNO ,
	E.CodArtProd ,
	E.NomeProd ,
	E.LottoSTD ,
	E.DURATAPREVISTAORE ,
	E.VERRICAMBIO ,
	E.LTCUMULATO ,
	E.Revisione
FROM 
	BreCea.dbo.ANAGRAFICAARTICOLI AS A 
	LEFT OUTER JOIN BreCea.dbo.EXTRAMAG AS E ON A.CODICE=E.CODART
	LEFT OUTER JOIN BreCea.dbo.ANAGRAFICAARTICOLICOMM AS A2 ON A.CODICE=A2.CODICEART AND a2.ESERCIZIO=YEAR(GETDATE())
	LEFT OUTER JOIN BreCea.dbo.ANAGRAFICAARTICOLIPROD AS A4 ON A2.CODICEART = A4.CODICEART AND A2.ESERCIZIO = A4.ESERCIZIO
	LEFT OUTER JOIN BreCea.dbo.ARTICOLIUMPREFERITE AS A3 ON A.CODICE=A3.CODART AND A3.TIPOUM=1
WHERE
	LEFT(a.CODICE,2)='TP' AND LEN(a.CODICE)=3
GO
GRANT SELECT ON Met_VistaTipiParte TO Metodo98
GO
*/

-- vista che recupera la distinta più recente nel caso che esistano diverse versioni della stessa distinta
-- nella tabella di frontiera
--
-- modificata il 25/10/2013 per elenco completo dei campi (no star) causa inserimento campo controllo
IF EXISTS(SELECT 1 FROM Sys.Objects SO WHERE SO.Name='Met_VistaTesteDBA' AND SO.Type='V')
	DROP VIEW Met_VistaTesteDBA
GO
CREATE VIEW Met_VistaTesteDBA AS
WITH CTE AS 
	(
	SELECT 
		ROW_NUMBER() OVER(PARTITION BY CODICE ORDER BY CAST(ID AS INT) DESC) AS 'ProgrID',
		    ID, CODICE, 0 AS PROGRESSIVO, VERSIONE, DESCR, STATODISTINTA, DATAINIZIOVALIDITA, DISTINTASTANDARD, UM, QUANTITA, UTENTE, DATA,
		    StatoMetodo 
	FROM 
		MET_DISTINTAARTCOMPOSTI
	)
SELECT * FROM CTE WHERE ProgrID=1 AND StatoMetodo=1
GO
GRANT SELECT ON Met_VistaTesteDBA TO Metodo98
GO


/*
### TRIGGER ###
*/
USE [Db_Lei]
GO
-- Trigger per aggiornamento articoli da PDM a Metodo
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TIU_PDM_ANAG]'))
	DROP TRIGGER [dbo].[TIU_PDM_ANAG]
GO
CREATE TRIGGER [dbo].[TIU_PDM_ANAG] ON [dbo].[PDM_ANAG] AFTER INSERT, UPDATE AS 
BEGIN
       DECLARE
       @NUMROWS  INT,
       @ERRNO    INT,
       @ERRMSG   VARCHAR(255),
       @StatoMetodo INT,
       @DESCR VARCHAR(80)  
    
       SELECT  @NUMROWS = @@ROWCOUNT, @StatoMetodo = StatoMetodo FROM INSERTED

       IF @NUMROWS = 0 OR @StatoMetodo <> 1
       RETURN 
/*
se il codice esiste già si aggiorna solo DESCRIZIONE (sia nell'articolo che in distinta base), REVISIONE, LINK DISEGNO, INFORMAZIONIAGG, CODARTPROD, NOMEPROD
*/ 
             BEGIN
                    UPDATE BRECEA.DBO.ANAGRAFICAARTICOLI 
                           SET DESCRIZIONE = I1.DESCR,UTENTEMODIFICA='PDM', DATAMODIFICA=GETDATE()
                           FROM inserted I1 INNER JOIN BRECEA.dbo.ANAGRAFICAARTICOLI ON I1.CODICE=BRECEA.dbo.ANAGRAFICAARTICOLI.CODICE
             END
       
             BEGIN
                    UPDATE BRECEA.DBO.EXTRAMAG SET REVISIONE=inserted.REV, DISEGNO=inserted.LINKFILE, UTENTEMODIFICA='PDM', DATAMODIFICA=GETDATE()
                    FROM BRECEA.DBO.EXTRAMAG INNER JOIN inserted ON BRECEA.DBO.EXTRAMAG.CODART = inserted.CODICE 
             END
/*
implementazioni del 12/09/2012 si aggiorna la descrizione nella distinta base
*/

             BEGIN
                    UPDATE BRECEA.DBO.DISTINTABASE SET DESCRIZIONE=inserted.DESCR, UTENTEMODIFICA='PDM', DATAMODIFICA=GETDATE()
                    FROM BRECEA.DBO.DISTINTABASE INNER JOIN inserted ON BRECEA.DBO.DISTINTABASE.CODARTCOMPONENTE = inserted.CODICE 
             END
/*
implementazioni del 01/02/2013 Imerio si aggiornano le Informazioni aggiuntive 
28/01/2014 fatta eccezione per i codici E e K
*/
BEGIN
                    UPDATE BRECEA.dbo.DESCRARTICOLI SET INFORMAZIONIAGG=inserted.INFORMAZIONIAGG, UTENTEMODIFICA='PDM', DATAMODIFICA=GETDATE()
                    FROM BRECEA.DBO.DESCRARTICOLI INNER JOIN inserted ON BRECEA.DBO.DESCRARTICOLI.CODICEART = inserted.CODICE 
                    WHERE BRECEA.DBO.DESCRARTICOLI.CODICEART NOT LIKE 'E%' OR BRECEA.DBO.DESCRARTICOLI.CODICEART NOT LIKE 'K%'
             END

/*
implementazioni del 19/02/2013 Imerio si aggiornano Nome Produttore e codice Produttore fatta eccezione per i codici E e K
(il 28/01/2014 sono state allineate le info tra Metodo e RD)
*/
BEGIN
                    UPDATE BRECEA.DBO.EXTRAMAG SET CODARTPROD=upper(inserted.CODARTPROD), NOMEPROD=inserted.NOMEPROD, UTENTEMODIFICA='PDM', DATAMODIFICA=GETDATE()
                    FROM BRECEA.DBO.EXTRAMAG INNER JOIN inserted ON BRECEA.DBO.EXTRAMAG.CODART = inserted.CODICE
                    WHERE BRECEA.DBO.EXTRAMAG.CODART NOT LIKE 'E%' OR BRECEA.DBO.EXTRAMAG.CODART NOT LIKE 'K%'
             END

/*
implementazioni del 09/12/2013 Imerio si aggiorna Codice Esaurito e Articolo Alternativo 
(il 03/12/2013 sono state allineate le info tra Metodo e RD)
*/
BEGIN
                    UPDATE BRECEA.DBO.ANAGRAFICAARTICOLICOMM SET ESAURITO=isnull(inserted.ESAURITO,0), UTENTEMODIFICA='PDM', DATAMODIFICA=GETDATE()
                    FROM BRECEA.DBO.ANAGRAFICAARTICOLICOMM INNER JOIN inserted ON BRECEA.DBO.ANAGRAFICAARTICOLICOMM.CODICEART = inserted.CODICE
                    WHERE BRECEA.DBO.ANAGRAFICAARTICOLICOMM.ESERCIZIO = YEAR(GETDATE())
             END

BEGIN
                    UPDATE BRECEA.DBO.ANAGRAFICAARTICOLIPROD SET ARTALTERNATIVO=upper(inserted.ARTALTERNATIVO), UTENTEMODIFICA='PDM', DATAMODIFICA=GETDATE()
                    FROM BRECEA.DBO.ANAGRAFICAARTICOLIPROD INNER JOIN inserted ON BRECEA.DBO.ANAGRAFICAARTICOLIPROD.CODICEART = inserted.CODICE
                    WHERE BRECEA.DBO.ANAGRAFICAARTICOLIPROD.ESERCIZIO = YEAR(GETDATE())
             END


/*
DA QUI IN AVANTI SI GESTISCONO LE INFO DA INSERIRE SOLO SE IL CODICE NON ESISTE
*/                  
             BEGIN
                    INSERT INTO BRECEA.dbo.ANAGRAFICAARTICOLI( CODICE ,DESCRIZIONE ,GRUPPO ,CATEGORIA ,CODCATEGORIASTAT ,PESONETTO ,SUPERFICIE ,CUBATURA ,NOMENCLCOMBINATA1 ,NOMENCLCOMBINATA2 ,ORIGINEINTRA ,CODICEARTIMBALLO ,NRPEZZIIMBALLO ,RIFERIMIMBALLO ,AGGIORNAMAG ,MOVIMENTAPARTITE ,MOVIMENTAMATRICOLE ,CODDEPOSITO ,NRTIPRAGGRUPPATE ,VARESPLICITE ,CODICEPRIMARIO ,ARTTIPOLOGIA ,UTENTEMODIFICA ,DATAMODIFICA ,ARTCONFIGURATO ,DESCRESTESA ,SERIE ,MODELLO ,ModelloBudget ,TipologiaProdotto ,APPLICAMAGGIORAZIONI ,PRODIGIOUSAPREZZIMETODO ,PRODIGIORAGGRCODICE ,PRODIGIOUSADESCRMETODO ,PRODIGIOESCLUDIBOX ,TIPOINTRA ,CODSERVIZIOINTRA ,MODEROGAZINTRA ,FLGSISTRI)
                    SELECT       upper(CODICE),DESCR,0,0,0,0,0,0,NOMENCLCOMBINATA1,NOMENCLCOMBINATA2,'','',0,'',AGGIORNAMAG,0,0 ,CODDEPOSITO,0,'','',0,'PDM',GETDATE(),0,'','','','','',0,0,0,0,0,TIPOINTRA,0,'',0 FROM INSERTED I1 
                    --WHERE (SELECT CODICE FROM BRECEA.DBO.ANAGRAFICAARTICOLI WHERE CODICE=I1.CODICE) IS NULL
                    WHERE I1.codice NOT IN (SELECT CODICE FROM BRECEA.DBO.ANAGRAFICAARTICOLI)
             END
       
             BEGIN
                    INSERT INTO BRECEA.dbo.DESCRARTICOLI (CODICEART,LINGUA ,DESCRIZIONEAGG ,INFORMAZIONIAGG ,UTENTEMODIFICA ,DATAMODIFICA)
                    SELECT upper(CODICE),0,'',INFORMAZIONIAGG,'PDM',GETDATE() FROM INSERTED I1 
                    --WHERE (SELECT CODICEART FROM BRECEA.DBO.DESCRARTICOLI WHERE CODICEART=I1.CODICE) IS NULL
                    WHERE I1.codice NOT IN (SELECT CODICEART FROM BRECEA.DBO.DESCRARTICOLI)          
             END
       
             --BEGIN 
             --     INSERT INTO BRECEA.dbo.ANAGRAFICAARTICOLICOMM (CODICEART ,ESERCIZIO ,CODIVA ,SCONTO1 ,SCONTO2 ,SCONTO3 ,GRUPPOPRZPART ,GRUPPOPRVPART ,PROVV ,BARCODE ,BARCODETYPE ,BARCODESTRING ,CODICEALT1 ,CODICEALT2 ,SCGENVENDITEITA ,SCGENVENDITEEST ,SCGENACQUISTIITA ,SCGENACQUISTIEST ,INESAURIMENTO ,ESAURITO ,QTAMINCONS ,USAPREZZIPART ,UTENTEMODIFICA ,DATAMODIFICA ,FlagCauzioni ,FLGBARCODEGENDAPROCAUTOMSTD ,OLDBARCODE ,OLDBARCODETYPE ,OLDBARCODESTRING ,PEZZIPERPALLET ,EXPORTECOMMERCE)
             --     SELECT CODICE,YEAR(GETDATE()),CODIVA,'','','',0,0,'',CODICE,1,'*' + CODICE + '*','','','','',SCGENACQUISTIITA,SCGENACQUISTIEST,0,0,0,USAPREZZIPART,'PDM',GETDATE(),0,0,'',0,'',0,0
             --     FROM INSERTED I1 
             --     --WHERE (SELECT CODICEART FROM BRECEA.DBO.ANAGRAFICAARTICOLICOMM WHERE CODICEART=I1.CODICE) IS NULL
  --          WHERE I1.codice NOT IN (SELECT CODICEART FROM BRECEA.DBO.ANAGRAFICAARTICOLICOMM WHERE ESERCIZIO=YEAR(GETDATE()))          
             --END
       
             BEGIN
                    INSERT INTO BRECEA.dbo.ANAGRAFICAARTICOLICOMM (CODICEART ,ESERCIZIO ,CODIVA ,SCONTO1 ,SCONTO2 ,SCONTO3 ,GRUPPOPRZPART ,GRUPPOPRVPART ,PROVV ,BARCODE ,BARCODETYPE ,BARCODESTRING ,CODICEALT1 ,CODICEALT2 ,
                    SCGENVENDITEITA ,SCGENVENDITEEST ,SCGENACQUISTIITA ,SCGENACQUISTIEST ,INESAURIMENTO ,ESAURITO ,QTAMINCONS ,USAPREZZIPART ,UTENTEMODIFICA ,DATAMODIFICA ,FlagCauzioni ,FLGBARCODEGENDAPROCAUTOMSTD ,OLDBARCODE ,OLDBARCODETYPE ,OLDBARCODESTRING ,PEZZIPERPALLET ,EXPORTECOMMERCE)
                    SELECT upper(I1.CODICE),T.CODICE,CODIVA,'','','',0,0,'',I1.CODICE,1,'*' + I1.CODICE + '*','','',SCGENVENDITEITA,SCGENVENDITEEST,SCGENACQUISTIITA,SCGENACQUISTIEST,0,0,0,USAPREZZIPART,'PDM',GETDATE(),0,0,'',0,'',0,0
                    FROM INSERTED I1, BRECEA.dbo.TABESERCIZI AS T
                    WHERE I1.codice NOT IN (SELECT CODICEART FROM BRECEA.DBO.ANAGRAFICAARTICOLICOMM)          
                    AND t.codice IN (SELECT CODICE FROM BRECEA.dbo.TABESERCIZI AS T WHERE codice >= YEAR(GETDATE()))
             END      

             --BEGIN 
             --     INSERT INTO BRECEA.dbo.ANAGRAFICAARTICOLIPROD(CODICEART,ESERCIZIO,SCORTAMIN,SCORTAMAX,LIVPRODUZIONE,RAGGRPRODUZIONE,LIVPRODPREC,TIPOGESTIONE,LIVRIORDINO,PROVENIENZA,ARTALTERNATIVO,QMINRIORDACQ,QMAXRIORDACQ,QDELTARIORDACQ,TAPPRONTACQ,TAPPROVVACQ,LOTTORIFACQ,ARROTLOTTOACQ,FORNPREFACQ,QMINRIORDPROD,QMAXRIORDPROD,QDELTARIORDPROD,TAPPRONTPROD,TAPPROVVPROD,LOTTORIFPROD,ARROTLOTTOPROD,QMINRIORDLAV,QMAXRIORDLAV,QDELTARIORDLAV,TAPPRONTLAV,TAPPROVVLAV,LOTTORIFLAV,ARROTLOTTOLAV,FORNPREFLAV,LOTTORIORDINO,UMLOTTOACQ,UMLOTTOPROD,UMLOTTOLAV,UTENTEMODIFICA,DATAMODIFICA,TIPOPRODUZIONE,FLOORSTOCK,GRUPPOAPPROV,COSTOORDINEACQ,COSTOORDINELAV,COSTOORDINEPROD,FATTORESCOSTAMENTO,TEMPOCOPERTURA,CONSUMOPREVISTO,MADPREVISTO,FATTORESICUREZZA,TIPOPRODOTTO,GESTIONEMATERIALI,FATTORECOMPRESSIONE,GRUPPOPREVISIONE,FORMULAFRONTIERA,LIVELLOSERVIZIO,FLAGMPS,FLAGNETTIFICAMPS,CODICEMPS,LOTTOFABBRICAZIONE,UMLOTTOFABBRICAZIONE,KS_GGScadenza,INTERVALLOPIANIF,DATAULTANALISI,GGORIZZONTEDISP)
             --     SELECT CODICE, YEAR(GETDATE()),0,0,LIVPRODUZIONE,RAGGRPRODUZIONE,'',TIPOGESTIONE,0,PROVENIENZA,'',0,0,0,0,0,0,0,'',0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,UM,UM,UM,'PDM',GETDATE(),0,0,0,0,0,0,0,0,0,0,0,TIPOPRODOTTO,GESTIONEMATERIALI,0,0,'',0,0,0,'',0,UM,0,0,NULL,0
             --     FROM INSERTED I1 
             --     --WHERE (SELECT CODICEART FROM BRECEA.DBO.ANAGRAFICAARTICOLIPROD WHERE CODICEART=I1.CODICE) IS NULL
             --     WHERE I1.codice NOT IN (SELECT CODICEART FROM BRECEA.DBO.ANAGRAFICAARTICOLIPROD WHERE ESERCIZIO=YEAR(GETDATE()))          
             --END

             BEGIN 
                    INSERT INTO BRECEA.dbo.ANAGRAFICAARTICOLIPROD(CODICEART,ESERCIZIO,SCORTAMIN,SCORTAMAX,LIVPRODUZIONE,RAGGRPRODUZIONE,LIVPRODPREC,TIPOGESTIONE,LIVRIORDINO,PROVENIENZA,ARTALTERNATIVO,QMINRIORDACQ,QMAXRIORDACQ,QDELTARIORDACQ,TAPPRONTACQ,TAPPROVVACQ,LOTTORIFACQ,ARROTLOTTOACQ,FORNPREFACQ,QMINRIORDPROD,QMAXRIORDPROD,QDELTARIORDPROD,TAPPRONTPROD,TAPPROVVPROD,LOTTORIFPROD,ARROTLOTTOPROD,QMINRIORDLAV,QMAXRIORDLAV,QDELTARIORDLAV,TAPPRONTLAV,TAPPROVVLAV,LOTTORIFLAV,ARROTLOTTOLAV,FORNPREFLAV,LOTTORIORDINO,UMLOTTOACQ,UMLOTTOPROD,UMLOTTOLAV,UTENTEMODIFICA,DATAMODIFICA,TIPOPRODUZIONE,FLOORSTOCK,GRUPPOAPPROV,COSTOORDINEACQ,COSTOORDINELAV,COSTOORDINEPROD,FATTORESCOSTAMENTO,TEMPOCOPERTURA,CONSUMOPREVISTO,MADPREVISTO,FATTORESICUREZZA,TIPOPRODOTTO,GESTIONEMATERIALI,FATTORECOMPRESSIONE,GRUPPOPREVISIONE,FORMULAFRONTIERA,LIVELLOSERVIZIO,FLAGMPS,FLAGNETTIFICAMPS,CODICEMPS,LOTTOFABBRICAZIONE,UMLOTTOFABBRICAZIONE,KS_GGScadenza,INTERVALLOPIANIF,DATAULTANALISI,GGORIZZONTEDISP)
                    SELECT upper(I1.CODICE), T.CODICE,0,0,LIVPRODUZIONE,RAGGRPRODUZIONE,'',TIPOGESTIONE,0,PROVENIENZA,'',0,0,0,0,0,0,0,'',0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,UM,UM,UM,'PDM',GETDATE(),0,0,0,0,0,0,0,0,0,0,0,TIPOPRODOTTO,GESTIONEMATERIALI,0,0,'',0,0,0,'',0,UM,0,0,NULL,0
                    FROM INSERTED I1, BRECEA.dbo.TABESERCIZI AS T
                    WHERE I1.codice NOT IN (SELECT CODICEART FROM BRECEA.DBO.ANAGRAFICAARTICOLIPROD)          
                    AND t.codice IN (SELECT CODICE FROM BRECEA.dbo.TABESERCIZI AS T WHERE codice >= YEAR(GETDATE()))
             END

       
             BEGIN
                    INSERT INTO BRECEA.dbo.ARTICOLIUNITAMISURA(CODART,UM,UTENTEMODIFICA,DATAMODIFICA)
                    SELECT upper(CODICE),UM,'PDM',GETDATE() FROM INSERTED I1 
                    --WHERE (SELECT CODART FROM BRECEA.DBO.ARTICOLIUNITAMISURA WHERE CODART=I1.CODICE) IS NULL
                    WHERE I1.codice NOT IN (SELECT CODART FROM BRECEA.DBO.ARTICOLIUNITAMISURA)          
             END
       
             BEGIN 
                    INSERT INTO BRECEA.dbo.ARTICOLIFATTORICONVERSIONE( CODART ,UM1 ,UM2 ,FORMULAFC ,FATTORE ,UTENTEMODIFICA ,DATAMODIFICA)
                    SELECT upper(CODICE),UM,UM,'1',1,'PDM',GETDATE() FROM INSERTED I1 
                    --WHERE (SELECT CODART FROM BRECEA.DBO.ARTICOLIFATTORICONVERSIONE WHERE CODART=I1.CODICE) IS NULL
                    WHERE I1.codice NOT IN (SELECT CODART FROM BRECEA.DBO.ARTICOLIFATTORICONVERSIONE)          
             END
             
             BEGIN 
                    INSERT INTO BRECEA.dbo.ARTICOLIUMPREFERITE( CODART ,TIPOUM ,UM ,UTENTEMODIFICA ,DATAMODIFICA)
                    SELECT upper(I1.CODICE),T.CODICE,UM,'PDM',GETDATE() FROM INSERTED I1, BRECEA.DBO.TABTIPIUM T 
                    --WHERE (SELECT CODART FROM BRECEA.DBO.ARTICOLIUMPREFERITE WHERE BRECEA.DBO.ARTICOLIUMPREFERITE.CODART=I1.CODICE) IS NULL
                    WHERE I1.codice NOT IN (SELECT CODART FROM BRECEA.DBO.ARTICOLIUMPREFERITE)          
             END
             
             BEGIN 
                    INSERT INTO BRECEA.dbo.EXTRAMAG( CODART ,UTENTEMODIFICA ,DATAMODIFICA ,CODPIANIFICATORE ,DISEGNO ,UtenteCreazione ,DataCreazione ,CodArtProd ,NomeProd ,LottoSTD ,DURATAPREVISTAORE ,VERRICAMBIO ,LTCUMULATO,Revisione)
                    SELECT upper(CODICE),'PDM',GETDATE(),CODPIANIFICATORE,LINKFILE,UTENTE,DATA,CodArtProd,NomeProd,LottoSTD,DURATAPREVISTAORE,VERRICAMBIO,LTCUMULATO,REV 
                    FROM INSERTED I1 
                    --WHERE (SELECT CODART FROM BRECEA.DBO.EXTRAMAG WHERE CODART=I1.CODICE) IS NULL
                    WHERE I1.codice NOT IN (SELECT CODART FROM BRECEA.DBO.EXTRAMAG)
             END

       
             BEGIN
                      UPDATE PDM_ANAG set statometodo=2,datamodificametodo=GETDATE() FROM PDM_anag p, inserted i 
                      WHERE p.codice=i.codice  AND I.codice IN (SELECT CODICE FROM BRECEA.DBO.ANAGRAFICAARTICOLI)
        END  
                    
       RETURN

ERROR:
       RAISERROR (@ERRMSG, 1, 1)
       ROLLBACK  TRANSACTION
END

GO







/*
procedure generazione distinte
*/


USE	BreCEA
GO


IF EXISTS ( SELECT
                *
            FROM
                DBO.SYSOBJECTS
            WHERE
                ID = OBJECT_ID(N'[DBO].[BreCea_Lei_GeneraDBA]')
                AND OBJECTPROPERTY(ID, N'ISPROCEDURE') = 1 )
    DROP PROCEDURE [DBO].[BreCea_Lei_GeneraDBA]
GO

CREATE PROCEDURE [dbo].[BreCea_Lei_GeneraDBA]
AS 
delete from Db_Lei..TEMP_Met_VistaTesteDBA;

INSERT  INTO Db_Lei..TEMP_Met_VistaTesteDBA
        ( ProgrID, ID, PROGRESSIVO, CODICE, VERSIONE, DESCR, STATODISTINTA, DATAINIZIOVALIDITA, DISTINTASTANDARD, UM,
          QUANTITA, UTENTE, DATA, StatoMetodo )
        SELECT
            ProgrID, ID, PROGRESSIVO, CODICE, VERSIONE, DESCR, STATODISTINTA, DATAINIZIOVALIDITA, DISTINTASTANDARD, UM,
            QUANTITA, UTENTE, DATA, StatoMetodo
        FROM
            Db_Lei..Met_VistaTesteDBA;

-- ROUTINE PER INSERIMENTO PROGRESSIVO DISTINTAARTCOMPOSTI
declare @fault int;
select @fault = max(progressivo) from DISTINTAARTCOMPOSTI;
DECLARE @NUOVOPROGRESSIVO INT;
SELECT
    @NUOVOPROGRESSIVO = isnull(PROGR,@fault)
FROM
    TABPROGRESSIVI
WHERE
    NOMETABELLA = 'DistintaArtComposti';
WITH    WRC
          AS ( SELECT
                ID, @NUOVOPROGRESSIVO + ROW_NUMBER() OVER ( ORDER BY ID ) AS NEWWRC, CODICE
               FROM
                Db_Lei..TEMP_Met_VistaTesteDBA)
    UPDATE
        Db_Lei..TEMP_Met_VistaTesteDBA
    SET PROGRESSIVO = NEWWRC
    FROM
        Db_Lei..TEMP_Met_VistaTesteDBA AS orca
    JOIN WRC
    ON  ORCA.ID = WRC.ID;
DECLARE @NEWPROGRESSIVO INT;
SELECT
    @NEWPROGRESSIVO = MAX(PROGRESSIVO)
FROM
    Db_Lei..TEMP_Met_VistaTesteDBA;
UPDATE
    TABPROGRESSIVI
SET PROGR = @NEWPROGRESSIVO
WHERE
    NOMETABELLA = 'DistintaArtComposti';

--cancellazione righe
INSERT  INTO Deleted_DISTINTAARTCOMPOSTI
        SELECT
            PROGRESSIVO, IDENTIFICATIVODBA, ARTCOMPOSTO, VERSIONEDBA, DSCVERSIONE, STATOVERSIONE, VALIDITADBA,
            DBASTANDARD, NOTEDBA, UM, QUANTITARIF, 'PDM_deleted', GETDATE(), RIFARTICOLO
        FROM
            DISTINTAARTCOMPOSTI
        WHERE
            VERSIONEDBA = 'STD'
            AND ARTCOMPOSTO IN ( SELECT
                                    CODICE
                                 FROM
                                    Db_Lei..TEMP_Met_VistaTesteDBA );

DELETE FROM
    DISTINTAARTCOMPOSTI
WHERE
    VERSIONEDBA = 'STD'
    AND ARTCOMPOSTO IN ( SELECT
                            CODICE
                         FROM
                            Db_Lei..TEMP_Met_VistaTesteDBA );

-- inserimento testa distinta
MERGE INTO DISTINTAARTCOMPOSTI AS TGT
    USING Db_Lei..TEMP_Met_VistaTesteDBA AS SRC
    ON TGT.ARTCOMPOSTO = SRC.CODICE
        AND TGT.VERSIONEDBA = 'STD'
    WHEN MATCHED
        THEN
  UPDATE  SET
            TGT.VERSIONEDBA = SRC.VERSIONE, TGT.DSCVERSIONE = SRC.DESCR, TGT.VALIDITADBA = SRC.DATAINIZIOVALIDITA,
            TGT.UM = SRC.UM, TGT.QUANTITARIF = SRC.QUANTITA, TGT.UTENTEMODIFICA = 'PDM_update',
            TGT.DATAMODIFICA = GETDATE()
    WHEN NOT MATCHED
        THEN 
INSERT
            ( PROGRESSIVO, IDENTIFICATIVODBA, ARTCOMPOSTO, VERSIONEDBA, DSCVERSIONE, STATOVERSIONE, VALIDITADBA,
              DBASTANDARD, NOTEDBA, UM, QUANTITARIF, UTENTEMODIFICA, DATAMODIFICA, RIFARTICOLO )
          VALUES
            ( PROGRESSIVO, '', SRC.CODICE, SRC.VERSIONE, '', 1, SRC.DATAINIZIOVALIDITA, 1, '', SRC.UM, SRC.QUANTITA,
              'PDM_insert', GETDATE(), SRC.CODICE );

MERGE INTO EXTRADISTINTA AS TGT
    USING Db_Lei..TEMP_Met_VistaTesteDBA AS SRC
    ON TGT.PROGRESSIVO = SRC.PROGRESSIVO
    WHEN MATCHED
        THEN
  UPDATE  SET
            TGT.PDMGenerated = 1, TGT.UTENTEMODIFICA = 'PDM_update', TGT.DATAMODIFICA = GETDATE()
    WHEN NOT MATCHED
        THEN 
INSERT
            ( PROGRESSIVO, UTENTEMODIFICA, DATAMODIFICA, PDMGenerated )
          VALUES
            ( SRC.PROGRESSIVO, 'PDM_INSERT', GETDATE(), 1 );

-- inserimento righe in tabella temporanea pre-inserimento in metodo
DELETE FROM Db_Lei..TEMP_Met_VistaRigheDBA;

INSERT  INTO Db_Lei..TEMP_Met_VistaRigheDBA
        ( RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE, SOLOSE, UM, QTA1, OPERATORE, QTA2, CALCOLO,
          QTACOSTO, VERSIONECOMPONENTE, SVILUPPACOMPONENTE, DISEGNOALLEGATO, NUMCOMPONENTE, SEQASSEMBLAGGIO,
          NOTECOMPONENTE, LEADTIMEADJ, PROGCICLO, NUMFASECICLO, UTENTEMODIFICA, DATAMODIFICA, UMCOSTO, FORMULAFRONTIERA )
        SELECT
            T.PROGRESSIVO, R.IDRIGA, R.IDRIGA, R.CODICE, '', '', R.UM, R.QUANTITA, '', '', '', '', '', '', '', '',
            R.SEQUENZAASSEMBLAGGIO, '', 0, 0, 0, 'PDM_insert', GETDATE(), R.UM, ''
        FROM
            Db_Lei..TEMP_Met_VistaTesteDBA T
        JOIN Db_Lei..MET_DISTINTABASE R
        ON  T.ID = R.ID;

-- aggiornamento descrizione 
UPDATE
    Db_Lei..TEMP_Met_VistaRigheDBA
SET DESCRIZIONE = A.DESCRIZIONE
FROM
    Db_Lei..TEMP_Met_VistaRigheDBA T
JOIN ANAGRAFICAARTICOLI A
ON  T.CODARTCOMPONENTE = A.CODICE;

INSERT  INTO DISTINTABASE
        ( RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE, SOLOSE, UM, QTA1, OPERATORE, QTA2, CALCOLO,
          QTACOSTO, VERSIONECOMPONENTE, SVILUPPACOMPONENTE, DISEGNOALLEGATO, NUMCOMPONENTE, SEQASSEMBLAGGIO,
          NOTECOMPONENTE, LEADTIMEADJ, PROGCICLO, NUMFASECICLO, UTENTEMODIFICA, DATAMODIFICA, UMCOSTO, FORMULAFRONTIERA )
        SELECT
            RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE, SOLOSE, UM, QTA1, OPERATORE, QTA2, CALCOLO,
            QTACOSTO, VERSIONECOMPONENTE, SVILUPPACOMPONENTE, DISEGNOALLEGATO, NUMCOMPONENTE, SEQASSEMBLAGGIO,
            NOTECOMPONENTE, LEADTIMEADJ, PROGCICLO, NUMFASECICLO, UTENTEMODIFICA, DATAMODIFICA, UMCOSTO,
            FORMULAFRONTIERA
        FROM
            Db_Lei..TEMP_Met_VistaRigheDBA;


DELETE FROM TEMP_Met_TABCOMPONENTIDBACICLO;

-- inserisco i dati provenienti dal database di frontiera LEI
INSERT  INTO TEMP_Met_TABCOMPONENTIDBACICLO
        ( PROGRESSIVODBA, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE )
        SELECT
            RIFPROGRESSIVO, NRRIGA, POSIZIONE, CODARTCOMPONENTE, DESCRIZIONE
        FROM
            Db_Lei..TEMP_Met_VistaRigheDBA;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET codartcomposto = d.ARTCOMPOSTO
FROM
    TEMP_Met_TABCOMPONENTIDBACICLO
JOIN DISTINTAARTCOMPOSTI D
ON  TEMP_Met_TABCOMPONENTIDBACICLO.PROGRESSIVODBA = D.PROGRESSIVO;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET IDRIGADBABEFORE = MVTC.IDRIGADBA, NUMEROFASEBEFORE = MVTC.NUMEROFASE
FROM
    TEMP_Met_TABCOMPONENTIDBACICLO TMP
JOIN Met_VistaTabComponentiDBACicloRelDAC MVTC
ON  TMP.CODARTCOMPONENTE = MVTC.CODARTCOMPONENTE
WHERE
    MVTC.ARTCOMPOSTO = tmp.CODARTCOMPOSTO;

UPDATE
    TEMP_Met_TABCOMPONENTIDBACICLO
SET PROGRESSIVO = dbo.GetProgressivoCiclo(codartcomposto)

-- aggiornamento flag
UPDATE db_lei.dbo.MET_DISTINTAARTCOMPOSTI SET statometodo=2
WHERE ID IN (SELECT DISTINCT ID FROM db_lei.dbo.Met_VistaTesteDBA);

UPDATE db_lei.dbo.MET_DISTINTABASE SET statometodo=2
WHERE ID IN (SELECT DISTINCT ID FROM db_lei.dbo.MET_DISTINTAARTCOMPOSTI WHERE StatoMetodo=2)


GO


GRANT EXECUTE ON [BreCea_Lei_GeneraDBA] TO METODO98
GO


USE Db_Lei
GO

GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON dbo.MET_DISTINTAARTCOMPOSTI TO [Metodo98]
GO

GRANT REFERENCES, SELECT, UPDATE, INSERT, DELETE ON dbo.MET_DISTINTABASE TO [Metodo98]
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TIU_MET_DAC]'))
	DROP TRIGGER [dbo].[TIU_MET_DAC]
GO


CREATE TRIGGER [dbo].[TIU_MET_DAC] ON [dbo].[MET_DISTINTAARTCOMPOSTI] AFTER INSERT, UPDATE AS 
BEGIN
	DECLARE
	@NUMROWS  INT,
	@ERRNO    INT,
	@ERRMSG   VARCHAR(255),
	@StatoMetodo INT,
	@DESCR VARCHAR(80)  
    
	SELECT  @NUMROWS = @@ROWCOUNT, @StatoMetodo = StatoMetodo FROM INSERTED

	IF @NUMROWS = 0 OR @StatoMetodo <> 1
	RETURN	
	
		BEGIN
			EXEC BRECEA.dbo.BreCea_Lei_GeneraDBA
		END
			
	RETURN

ERROR:
	RAISERROR (@ERRMSG, 1, 1)
	ROLLBACK  TRANSACTION
END

GO







-- **********************************************
-- ************** proprietà estese ************** 
-- **********************************************

/*
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'indica provenienza distinta
0 = distinta generica
1 = distinta generata/gestita da PDM
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ExtraDistinta', @level2type = N'COLUMN',	@level2name = N'PDMGenerated'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Trigger insert/update che inserisce/aggiorna il codice articolo in Metodo (db brevetti)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'TRIGGER',@level2name=N'TIU_PDM_ANAG'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'chiave univoca della tabella' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_DISTINTAARTCOMPOSTI', @level2type=N'COLUMN',@level2name=N'ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_DISTINTAARTCOMPOSTI', @level2type=N'COLUMN',@level2name=N'ARTICOLOPADRE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1 = distinta attiva (rilascio)
2 = distinta in definizione (esportazione manuale)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_DISTINTAARTCOMPOSTI', @level2type=N'COLUMN',@level2name=N'STATOBOM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'per usi futuri' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'UM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'formato numerico decimale
da convertire' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'QTA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'campo extramag' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'CODPIANIFICATORE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'campo extramag' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'CodArtProd'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'campo extramag' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'NomeProd'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'campo extramag' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'LottoSTD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'campo extramag' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'DURATAPREVISTAORE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'campo extramag' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'VERRICAMBIO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'campo extramag' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'LTCUMULATO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'indica stato del record per Metodo
0 = inserito dal PDM e non processato da LEI
1 = processato da LEI e pronto per limportazione in Metodo
2 = importato in Metodo
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'StatoMetodo'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'indica la data di processo/importazione in Metodo' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PDM_ANAG', @level2type=N'COLUMN',@level2name=N'DataModificaMetodo'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contatore progressivo per ID rilascio, assegnato alle righe ordinate per posizione crescente' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MET_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'IDRIGA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Posizione PDM' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MET_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'POSIZIONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'UM base del codice articolo componente' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MET_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'UM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Formato alfanumerico con separatore decimale virgola ","' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MET_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'QUANTITA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Posizione PDM' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MET_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'SEQUENZAASSEMBLAGGIO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'indica stato del record per Metodo
0 = inserito dal PDM e non processato da LEI
1 = processato da LEI e pronto per limportazione in Metodo
2 = importato in Metodo
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MET_DISTINTABASE', @level2type=N'COLUMN',@level2name=N'StatoMetodo'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Progressivo distinta in Metodo', @level0type = N'SCHEMA', @level0name = N'dbo',
	@level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'PROGRESSIVO'
GO

EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Sessione lavoro PDM (campo ordinamento)', @level0type = N'SCHEMA', @level0name = N'dbo',
	@level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'ID'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Codice articolo padre', @level0type = N'SCHEMA', @level0name = N'dbo',
	@level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'CODICE'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Valore fisso "STD"', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
	@level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'VERSIONE'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Valore fisso vuoto ""', @level0type = N'SCHEMA', @level0name = N'dbo',
	@level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'DESCR'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Stato distinta da tabella PDM', @level0type = N'SCHEMA', @level0name = N'dbo',
	@level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'STATODISTINTA'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Valore fisso 01/01/2008', @level0type = N'SCHEMA', @level0name = N'dbo',
	@level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'DATAINIZIOVALIDITA'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Valore fisso 1', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
	@level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'DISTINTASTANDARD'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Unutà base del codice articolo padre', @level0type = N'SCHEMA', @level0name = N'dbo',
	@level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'UM'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'Valore fisso = 1', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
	@level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN', @level2name = N'QUANTITA'
GO
EXEC sys.sp_addextendedproperty @name = N'MS_Description', @value = N'indica stato del record per Metodo
0 = inserito dal PDM e non processato da LEI
1 = processato da LEI e pronto per limportazione in Metodo
2 = importato in Metodo
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'MET_DISTINTAARTCOMPOSTI', @level2type = N'COLUMN',
	@level2name = N'StatoMetodo'
GO
*/